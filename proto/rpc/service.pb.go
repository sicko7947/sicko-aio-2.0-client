// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.6
// source: rpc/service.proto

package grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_rpc_service_proto protoreflect.FileDescriptor

var file_rpc_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x11, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x72, 0x70, 0x63, 0x2f, 0x6b, 0x61, 0x73, 0x61, 0x64, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0xb2, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x71, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x6b, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x73, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x53, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x4b, 0x70, 0x73, 0x64, 0x6b, 0x43, 0x74,
	0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4b, 0x70, 0x73, 0x64, 0x6b, 0x43, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4b, 0x70, 0x73, 0x64, 0x6b, 0x43, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x12, 0x5a, 0x10, 0x72, 0x70, 0x63, 0x3b, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var file_rpc_service_proto_goTypes = []interface{}{
	(*StreamProductInformationRequest)(nil),     // 0: protobuf.StreamProductInformationRequest
	(*StreamProductCheckLiveRequest)(nil),       // 1: protobuf.StreamProductCheckLiveRequest
	(*StreamProductMonitorGraphqlRequest)(nil),  // 2: protobuf.StreamProductMonitorGraphqlRequest
	(*StreamKpsdkCtRequest)(nil),                // 3: protobuf.StreamKpsdkCtRequest
	(*StreamProductInformationResponse)(nil),    // 4: protobuf.StreamProductInformationResponse
	(*StreamProductCheckLiveResponse)(nil),      // 5: protobuf.StreamProductCheckLiveResponse
	(*StreamProductMonitorGraphqlResponse)(nil), // 6: protobuf.StreamProductMonitorGraphqlResponse
	(*StreamKpsdkCtResponse)(nil),               // 7: protobuf.StreamKpsdkCtResponse
}
var file_rpc_service_proto_depIdxs = []int32{
	0, // 0: protobuf.Stream.ProductInformation:input_type -> protobuf.StreamProductInformationRequest
	1, // 1: protobuf.Stream.ProductCheckLive:input_type -> protobuf.StreamProductCheckLiveRequest
	2, // 2: protobuf.Stream.ProductMonitor:input_type -> protobuf.StreamProductMonitorGraphqlRequest
	3, // 3: protobuf.Stream.GenKpsdkCt:input_type -> protobuf.StreamKpsdkCtRequest
	4, // 4: protobuf.Stream.ProductInformation:output_type -> protobuf.StreamProductInformationResponse
	5, // 5: protobuf.Stream.ProductCheckLive:output_type -> protobuf.StreamProductCheckLiveResponse
	6, // 6: protobuf.Stream.ProductMonitor:output_type -> protobuf.StreamProductMonitorGraphqlResponse
	7, // 7: protobuf.Stream.GenKpsdkCt:output_type -> protobuf.StreamKpsdkCtResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_service_proto_init() }
func file_rpc_service_proto_init() {
	if File_rpc_service_proto != nil {
		return
	}
	file_rpc_product_proto_init()
	file_rpc_kasada_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_service_proto_goTypes,
		DependencyIndexes: file_rpc_service_proto_depIdxs,
	}.Build()
	File_rpc_service_proto = out.File
	file_rpc_service_proto_rawDesc = nil
	file_rpc_service_proto_goTypes = nil
	file_rpc_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	ProductInformation(ctx context.Context, opts ...grpc.CallOption) (Stream_ProductInformationClient, error)
	ProductCheckLive(ctx context.Context, opts ...grpc.CallOption) (Stream_ProductCheckLiveClient, error)
	ProductMonitor(ctx context.Context, opts ...grpc.CallOption) (Stream_ProductMonitorClient, error)
	GenKpsdkCt(ctx context.Context, opts ...grpc.CallOption) (Stream_GenKpsdkCtClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) ProductInformation(ctx context.Context, opts ...grpc.CallOption) (Stream_ProductInformationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/protobuf.Stream/ProductInformation", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamProductInformationClient{stream}
	return x, nil
}

type Stream_ProductInformationClient interface {
	Send(*StreamProductInformationRequest) error
	Recv() (*StreamProductInformationResponse, error)
	grpc.ClientStream
}

type streamProductInformationClient struct {
	grpc.ClientStream
}

func (x *streamProductInformationClient) Send(m *StreamProductInformationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamProductInformationClient) Recv() (*StreamProductInformationResponse, error) {
	m := new(StreamProductInformationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) ProductCheckLive(ctx context.Context, opts ...grpc.CallOption) (Stream_ProductCheckLiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[1], "/protobuf.Stream/ProductCheckLive", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamProductCheckLiveClient{stream}
	return x, nil
}

type Stream_ProductCheckLiveClient interface {
	Send(*StreamProductCheckLiveRequest) error
	Recv() (*StreamProductCheckLiveResponse, error)
	grpc.ClientStream
}

type streamProductCheckLiveClient struct {
	grpc.ClientStream
}

func (x *streamProductCheckLiveClient) Send(m *StreamProductCheckLiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamProductCheckLiveClient) Recv() (*StreamProductCheckLiveResponse, error) {
	m := new(StreamProductCheckLiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) ProductMonitor(ctx context.Context, opts ...grpc.CallOption) (Stream_ProductMonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[2], "/protobuf.Stream/ProductMonitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamProductMonitorClient{stream}
	return x, nil
}

type Stream_ProductMonitorClient interface {
	Send(*StreamProductMonitorGraphqlRequest) error
	Recv() (*StreamProductMonitorGraphqlResponse, error)
	grpc.ClientStream
}

type streamProductMonitorClient struct {
	grpc.ClientStream
}

func (x *streamProductMonitorClient) Send(m *StreamProductMonitorGraphqlRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamProductMonitorClient) Recv() (*StreamProductMonitorGraphqlResponse, error) {
	m := new(StreamProductMonitorGraphqlResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) GenKpsdkCt(ctx context.Context, opts ...grpc.CallOption) (Stream_GenKpsdkCtClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[3], "/protobuf.Stream/GenKpsdkCt", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGenKpsdkCtClient{stream}
	return x, nil
}

type Stream_GenKpsdkCtClient interface {
	Send(*StreamKpsdkCtRequest) error
	Recv() (*StreamKpsdkCtResponse, error)
	grpc.ClientStream
}

type streamGenKpsdkCtClient struct {
	grpc.ClientStream
}

func (x *streamGenKpsdkCtClient) Send(m *StreamKpsdkCtRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamGenKpsdkCtClient) Recv() (*StreamKpsdkCtResponse, error) {
	m := new(StreamKpsdkCtResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	ProductInformation(Stream_ProductInformationServer) error
	ProductCheckLive(Stream_ProductCheckLiveServer) error
	ProductMonitor(Stream_ProductMonitorServer) error
	GenKpsdkCt(Stream_GenKpsdkCtServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) ProductInformation(Stream_ProductInformationServer) error {
	return status.Errorf(codes.Unimplemented, "method ProductInformation not implemented")
}
func (*UnimplementedStreamServer) ProductCheckLive(Stream_ProductCheckLiveServer) error {
	return status.Errorf(codes.Unimplemented, "method ProductCheckLive not implemented")
}
func (*UnimplementedStreamServer) ProductMonitor(Stream_ProductMonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method ProductMonitor not implemented")
}
func (*UnimplementedStreamServer) GenKpsdkCt(Stream_GenKpsdkCtServer) error {
	return status.Errorf(codes.Unimplemented, "method GenKpsdkCt not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_ProductInformation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).ProductInformation(&streamProductInformationServer{stream})
}

type Stream_ProductInformationServer interface {
	Send(*StreamProductInformationResponse) error
	Recv() (*StreamProductInformationRequest, error)
	grpc.ServerStream
}

type streamProductInformationServer struct {
	grpc.ServerStream
}

func (x *streamProductInformationServer) Send(m *StreamProductInformationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamProductInformationServer) Recv() (*StreamProductInformationRequest, error) {
	m := new(StreamProductInformationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_ProductCheckLive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).ProductCheckLive(&streamProductCheckLiveServer{stream})
}

type Stream_ProductCheckLiveServer interface {
	Send(*StreamProductCheckLiveResponse) error
	Recv() (*StreamProductCheckLiveRequest, error)
	grpc.ServerStream
}

type streamProductCheckLiveServer struct {
	grpc.ServerStream
}

func (x *streamProductCheckLiveServer) Send(m *StreamProductCheckLiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamProductCheckLiveServer) Recv() (*StreamProductCheckLiveRequest, error) {
	m := new(StreamProductCheckLiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_ProductMonitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).ProductMonitor(&streamProductMonitorServer{stream})
}

type Stream_ProductMonitorServer interface {
	Send(*StreamProductMonitorGraphqlResponse) error
	Recv() (*StreamProductMonitorGraphqlRequest, error)
	grpc.ServerStream
}

type streamProductMonitorServer struct {
	grpc.ServerStream
}

func (x *streamProductMonitorServer) Send(m *StreamProductMonitorGraphqlResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamProductMonitorServer) Recv() (*StreamProductMonitorGraphqlRequest, error) {
	m := new(StreamProductMonitorGraphqlRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_GenKpsdkCt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).GenKpsdkCt(&streamGenKpsdkCtServer{stream})
}

type Stream_GenKpsdkCtServer interface {
	Send(*StreamKpsdkCtResponse) error
	Recv() (*StreamKpsdkCtRequest, error)
	grpc.ServerStream
}

type streamGenKpsdkCtServer struct {
	grpc.ServerStream
}

func (x *streamGenKpsdkCtServer) Send(m *StreamKpsdkCtResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamGenKpsdkCtServer) Recv() (*StreamKpsdkCtRequest, error) {
	m := new(StreamKpsdkCtRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProductInformation",
			Handler:       _Stream_ProductInformation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProductCheckLive",
			Handler:       _Stream_ProductCheckLive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProductMonitor",
			Handler:       _Stream_ProductMonitor_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GenKpsdkCt",
			Handler:       _Stream_GenKpsdkCt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/service.proto",
}

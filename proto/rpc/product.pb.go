// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.6
// source: rpc/product.proto

package grpc_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SizeSkuMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gtin  string `protobuf:"bytes,1,opt,name=gtin,proto3" json:"gtin,omitempty"`
	SkuId string `protobuf:"bytes,2,opt,name=skuId,proto3" json:"skuId,omitempty"`
}

func (x *SizeSkuMap) Reset() {
	*x = SizeSkuMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SizeSkuMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SizeSkuMap) ProtoMessage() {}

func (x *SizeSkuMap) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SizeSkuMap.ProtoReflect.Descriptor instead.
func (*SizeSkuMap) Descriptor() ([]byte, []int) {
	return file_rpc_product_proto_rawDescGZIP(), []int{0}
}

func (x *SizeSkuMap) GetGtin() string {
	if x != nil {
		return x.Gtin
	}
	return ""
}

func (x *SizeSkuMap) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

// Define Stream ProductInformation Request
type StreamProductInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Country    string   `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Language   string   `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	MerchGroup string   `protobuf:"bytes,4,opt,name=merchGroup,proto3" json:"merchGroup,omitempty"`
	Proxy      []string `protobuf:"bytes,5,rep,name=proxy,proto3" json:"proxy,omitempty"`
}

func (x *StreamProductInformationRequest) Reset() {
	*x = StreamProductInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamProductInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamProductInformationRequest) ProtoMessage() {}

func (x *StreamProductInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamProductInformationRequest.ProtoReflect.Descriptor instead.
func (*StreamProductInformationRequest) Descriptor() ([]byte, []int) {
	return file_rpc_product_proto_rawDescGZIP(), []int{1}
}

func (x *StreamProductInformationRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *StreamProductInformationRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *StreamProductInformationRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *StreamProductInformationRequest) GetMerchGroup() string {
	if x != nil {
		return x.MerchGroup
	}
	return ""
}

func (x *StreamProductInformationRequest) GetProxy() []string {
	if x != nil {
		return x.Proxy
	}
	return nil
}

// Define Stream ProductInformation Response
type StreamProductInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects map[string]*StreamProductInformationResponseSkuData `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Errors  *Errors                                             `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *StreamProductInformationResponse) Reset() {
	*x = StreamProductInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamProductInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamProductInformationResponse) ProtoMessage() {}

func (x *StreamProductInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamProductInformationResponse.ProtoReflect.Descriptor instead.
func (*StreamProductInformationResponse) Descriptor() ([]byte, []int) {
	return file_rpc_product_proto_rawDescGZIP(), []int{2}
}

func (x *StreamProductInformationResponse) GetObjects() map[string]*StreamProductInformationResponseSkuData {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *StreamProductInformationResponse) GetErrors() *Errors {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Define Stream ProductCheckLive Request
type StreamProductCheckLiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId string `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
	Proxy     string `protobuf:"bytes,2,opt,name=proxy,proto3" json:"proxy,omitempty"`
}

func (x *StreamProductCheckLiveRequest) Reset() {
	*x = StreamProductCheckLiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamProductCheckLiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamProductCheckLiveRequest) ProtoMessage() {}

func (x *StreamProductCheckLiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamProductCheckLiveRequest.ProtoReflect.Descriptor instead.
func (*StreamProductCheckLiveRequest) Descriptor() ([]byte, []int) {
	return file_rpc_product_proto_rawDescGZIP(), []int{3}
}

func (x *StreamProductCheckLiveRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *StreamProductCheckLiveRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

// Define Stream ProductCheckLive Response
type StreamProductCheckLiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Live          bool    `protobuf:"varint,1,opt,name=live,proto3" json:"live,omitempty"`
	StartTime     string  `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Errors        *Errors `protobuf:"bytes,3,opt,name=errors,proto3" json:"errors,omitempty"`
	Status        string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	PublishType   string  `protobuf:"bytes,5,opt,name=publishType,proto3" json:"publishType,omitempty"`
	QuantityLimit int64   `protobuf:"varint,6,opt,name=quantityLimit,proto3" json:"quantityLimit,omitempty"`
}

func (x *StreamProductCheckLiveResponse) Reset() {
	*x = StreamProductCheckLiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamProductCheckLiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamProductCheckLiveResponse) ProtoMessage() {}

func (x *StreamProductCheckLiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamProductCheckLiveResponse.ProtoReflect.Descriptor instead.
func (*StreamProductCheckLiveResponse) Descriptor() ([]byte, []int) {
	return file_rpc_product_proto_rawDescGZIP(), []int{4}
}

func (x *StreamProductCheckLiveResponse) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *StreamProductCheckLiveResponse) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *StreamProductCheckLiveResponse) GetErrors() *Errors {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *StreamProductCheckLiveResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StreamProductCheckLiveResponse) GetPublishType() string {
	if x != nil {
		return x.PublishType
	}
	return ""
}

func (x *StreamProductCheckLiveResponse) GetQuantityLimit() int64 {
	if x != nil {
		return x.QuantityLimit
	}
	return 0
}

// Define Stream roductMonitorGraphql Request
type StreamProductMonitorGraphqlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId string `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
	Country   string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Locale    string `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`
	Proxy     string `protobuf:"bytes,4,opt,name=proxy,proto3" json:"proxy,omitempty"`
}

func (x *StreamProductMonitorGraphqlRequest) Reset() {
	*x = StreamProductMonitorGraphqlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamProductMonitorGraphqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamProductMonitorGraphqlRequest) ProtoMessage() {}

func (x *StreamProductMonitorGraphqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamProductMonitorGraphqlRequest.ProtoReflect.Descriptor instead.
func (*StreamProductMonitorGraphqlRequest) Descriptor() ([]byte, []int) {
	return file_rpc_product_proto_rawDescGZIP(), []int{5}
}

func (x *StreamProductMonitorGraphqlRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *StreamProductMonitorGraphqlRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *StreamProductMonitorGraphqlRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *StreamProductMonitorGraphqlRequest) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

// Define Stream ProductMonitorGraphql Response
type StreamProductMonitorGraphqlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName        string                 `protobuf:"bytes,1,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductDescription string                 `protobuf:"bytes,2,opt,name=productDescription,proto3" json:"productDescription,omitempty"`
	ProductId          string                 `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	QuantityLimit      int64                  `protobuf:"varint,4,opt,name=quantityLimit,proto3" json:"quantityLimit,omitempty"`
	SizeSkuMap         map[string]*SizeSkuMap `protobuf:"bytes,5,rep,name=sizeSkuMap,proto3" json:"sizeSkuMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Errors             *Errors                `protobuf:"bytes,6,opt,name=errors,proto3" json:"errors,omitempty"`
}

func (x *StreamProductMonitorGraphqlResponse) Reset() {
	*x = StreamProductMonitorGraphqlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamProductMonitorGraphqlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamProductMonitorGraphqlResponse) ProtoMessage() {}

func (x *StreamProductMonitorGraphqlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamProductMonitorGraphqlResponse.ProtoReflect.Descriptor instead.
func (*StreamProductMonitorGraphqlResponse) Descriptor() ([]byte, []int) {
	return file_rpc_product_proto_rawDescGZIP(), []int{6}
}

func (x *StreamProductMonitorGraphqlResponse) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *StreamProductMonitorGraphqlResponse) GetProductDescription() string {
	if x != nil {
		return x.ProductDescription
	}
	return ""
}

func (x *StreamProductMonitorGraphqlResponse) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *StreamProductMonitorGraphqlResponse) GetQuantityLimit() int64 {
	if x != nil {
		return x.QuantityLimit
	}
	return 0
}

func (x *StreamProductMonitorGraphqlResponse) GetSizeSkuMap() map[string]*SizeSkuMap {
	if x != nil {
		return x.SizeSkuMap
	}
	return nil
}

func (x *StreamProductMonitorGraphqlResponse) GetErrors() *Errors {
	if x != nil {
		return x.Errors
	}
	return nil
}

type StreamProductInformationResponseSkuData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ProductName        string                 `protobuf:"bytes,2,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductDescription string                 `protobuf:"bytes,3,opt,name=productDescription,proto3" json:"productDescription,omitempty"`
	ProductId          string                 `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
	QuantityLimit      int64                  `protobuf:"varint,5,opt,name=quantityLimit,proto3" json:"quantityLimit,omitempty"`
	LaunchId           string                 `protobuf:"bytes,6,opt,name=launchId,proto3" json:"launchId,omitempty"`
	SizeSkus           map[string]*SizeSkuMap `protobuf:"bytes,7,rep,name=sizeSkus,proto3" json:"sizeSkus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Price              string                 `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`
	PublishType        string                 `protobuf:"bytes,9,opt,name=publishType,proto3" json:"publishType,omitempty"`
}

func (x *StreamProductInformationResponseSkuData) Reset() {
	*x = StreamProductInformationResponseSkuData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamProductInformationResponseSkuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamProductInformationResponseSkuData) ProtoMessage() {}

func (x *StreamProductInformationResponseSkuData) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamProductInformationResponseSkuData.ProtoReflect.Descriptor instead.
func (*StreamProductInformationResponseSkuData) Descriptor() ([]byte, []int) {
	return file_rpc_product_proto_rawDescGZIP(), []int{2, 0}
}

func (x *StreamProductInformationResponseSkuData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StreamProductInformationResponseSkuData) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *StreamProductInformationResponseSkuData) GetProductDescription() string {
	if x != nil {
		return x.ProductDescription
	}
	return ""
}

func (x *StreamProductInformationResponseSkuData) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *StreamProductInformationResponseSkuData) GetQuantityLimit() int64 {
	if x != nil {
		return x.QuantityLimit
	}
	return 0
}

func (x *StreamProductInformationResponseSkuData) GetLaunchId() string {
	if x != nil {
		return x.LaunchId
	}
	return ""
}

func (x *StreamProductInformationResponseSkuData) GetSizeSkus() map[string]*SizeSkuMap {
	if x != nil {
		return x.SizeSkus
	}
	return nil
}

func (x *StreamProductInformationResponseSkuData) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *StreamProductInformationResponseSkuData) GetPublishType() string {
	if x != nil {
		return x.PublishType
	}
	return ""
}

var File_rpc_product_proto protoreflect.FileDescriptor

var file_rpc_product_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x10, 0x72,
	0x70, 0x63, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x36, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x74, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x74, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xce, 0x05, 0x0a, 0x20, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xbc, 0x03, 0x0a, 0x07,
	0x73, 0x6b, 0x75, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x5c, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x6b, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x73, 0x6b, 0x75, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6b, 0x75, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x6b, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x51, 0x0a, 0x0d, 0x53, 0x69, 0x7a, 0x65, 0x53,
	0x6b, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6e, 0x0a, 0x0c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x73, 0x6b, 0x75, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x1d, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x22,
	0xdc, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8a,
	0x01, 0x0a, 0x22, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x99, 0x03, 0x0a, 0x23,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5d, 0x0a, 0x0a, 0x73, 0x69, 0x7a,
	0x65, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x7a,
	0x65, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69,
	0x7a, 0x65, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x1a, 0x53, 0x0a, 0x0f, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x5a, 0x10, 0x72, 0x70, 0x63, 0x3b, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_rpc_product_proto_rawDescOnce sync.Once
	file_rpc_product_proto_rawDescData = file_rpc_product_proto_rawDesc
)

func file_rpc_product_proto_rawDescGZIP() []byte {
	file_rpc_product_proto_rawDescOnce.Do(func() {
		file_rpc_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_product_proto_rawDescData)
	})
	return file_rpc_product_proto_rawDescData
}

var file_rpc_product_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_rpc_product_proto_goTypes = []interface{}{
	(*SizeSkuMap)(nil),                              // 0: protobuf.sizeSkuMap
	(*StreamProductInformationRequest)(nil),         // 1: protobuf.StreamProductInformationRequest
	(*StreamProductInformationResponse)(nil),        // 2: protobuf.StreamProductInformationResponse
	(*StreamProductCheckLiveRequest)(nil),           // 3: protobuf.StreamProductCheckLiveRequest
	(*StreamProductCheckLiveResponse)(nil),          // 4: protobuf.StreamProductCheckLiveResponse
	(*StreamProductMonitorGraphqlRequest)(nil),      // 5: protobuf.StreamProductMonitorGraphqlRequest
	(*StreamProductMonitorGraphqlResponse)(nil),     // 6: protobuf.StreamProductMonitorGraphqlResponse
	(*StreamProductInformationResponseSkuData)(nil), // 7: protobuf.StreamProductInformationResponse.skuData
	nil,            // 8: protobuf.StreamProductInformationResponse.ObjectsEntry
	nil,            // 9: protobuf.StreamProductInformationResponse.skuData.SizeSkusEntry
	nil,            // 10: protobuf.StreamProductMonitorGraphqlResponse.SizeSkuMapEntry
	(*Errors)(nil), // 11: protobuf.Errors
}
var file_rpc_product_proto_depIdxs = []int32{
	8,  // 0: protobuf.StreamProductInformationResponse.objects:type_name -> protobuf.StreamProductInformationResponse.ObjectsEntry
	11, // 1: protobuf.StreamProductInformationResponse.errors:type_name -> protobuf.Errors
	11, // 2: protobuf.StreamProductCheckLiveResponse.errors:type_name -> protobuf.Errors
	10, // 3: protobuf.StreamProductMonitorGraphqlResponse.sizeSkuMap:type_name -> protobuf.StreamProductMonitorGraphqlResponse.SizeSkuMapEntry
	11, // 4: protobuf.StreamProductMonitorGraphqlResponse.errors:type_name -> protobuf.Errors
	9,  // 5: protobuf.StreamProductInformationResponse.skuData.sizeSkus:type_name -> protobuf.StreamProductInformationResponse.skuData.SizeSkusEntry
	7,  // 6: protobuf.StreamProductInformationResponse.ObjectsEntry.value:type_name -> protobuf.StreamProductInformationResponse.skuData
	0,  // 7: protobuf.StreamProductInformationResponse.skuData.SizeSkusEntry.value:type_name -> protobuf.sizeSkuMap
	0,  // 8: protobuf.StreamProductMonitorGraphqlResponse.SizeSkuMapEntry.value:type_name -> protobuf.sizeSkuMap
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_rpc_product_proto_init() }
func file_rpc_product_proto_init() {
	if File_rpc_product_proto != nil {
		return
	}
	file_rpc_errors_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rpc_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SizeSkuMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamProductInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamProductInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamProductCheckLiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamProductCheckLiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamProductMonitorGraphqlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamProductMonitorGraphqlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamProductInformationResponseSkuData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rpc_product_proto_goTypes,
		DependencyIndexes: file_rpc_product_proto_depIdxs,
		MessageInfos:      file_rpc_product_proto_msgTypes,
	}.Build()
	File_rpc_product_proto = out.File
	file_rpc_product_proto_rawDesc = nil
	file_rpc_product_proto_goTypes = nil
	file_rpc_product_proto_depIdxs = nil
}
